#include <stdio.h>
#include <stdlib.h>

// Define the structure for a XOR tree node
struct TreeNode {
    int value;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to create a new node
struct TreeNode* createNode(int value) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    if (newNode) {
        newNode->value = value;
        newNode->left = NULL;
        newNode->right = NULL;
    }
    return newNode;
}

// Function to perform XOR operation along a path in the tree
int xorPath(struct TreeNode* root, int pathValue) {
    struct TreeNode* current = root;
    int result = 0;
    int bitIndex = 31; // Assuming 32-bit integers

    while (current) {
        // Get the bit at the current index
        int bit = (pathValue >> bitIndex) & 1;

        if (bit == 0) {
            if (current->right) {
                result ^= (1 << bitIndex);
                current = current->right;
            } else {
                current = current->left;
            }
        } else {
            if (current->left) {
                current = current->left;
            } else {
                result ^= (1 << bitIndex);
                current = current->right;
            }
        }

        bitIndex--;
    }

    return result;
}

int main() {
    // Create a XOR tree
    struct TreeNode* root = createNode(0);
    root->left = createNode(1);
    root->right = createNode(0);
    root->left->left = createNode(1);
    root->left->right = createNode(0);
    root->right->left = createNode(0);
    root->right->right = createNode(1);

    // Example of performing XOR operation along a path
    int pathValue = 6; // 110 in binary
    int result = xorPath(root, pathValue);
    printf("XOR result along path %d is: %d\n", pathValue, result);

    // Clean up the memory
    free(root->left->left);
    free(root->left->right);
    free(root->right->left);
    free(root->right->right);
    free(root->left);
    free(root->right);
    free(root);

    return 0;
}
